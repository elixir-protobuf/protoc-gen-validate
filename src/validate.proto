syntax = "proto2";
package validate;

import "google/protobuf/descriptor.proto";

// Validation rules applied at the field level
extend google.protobuf.FieldOptions {
    // Rules specify the validations to be performed on this field. By default,
    // no validation is performed against a field.
    optional FieldRules rules = 1071;
}

message FieldRules {
    optional MessageRules message = 17;
    oneof type {
        // Scalar Field Types
        Int32Rules    int32    = 3;
        UInt64Rules   uint64   = 6;
        StringRules   string   = 14;
        RepeatedRules repeated = 18;
    }
}

// Int32Rules describes the constraints applied to `int32` values
message Int32Rules {
    // Lt specifies that this field must be less than the specified value,
    // exclusive
    optional int32 lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    optional int32 lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    optional int32 gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    optional int32 gte = 5;
}

message MessageRules {
    // Required specifies that this field must be set
    optional bool required = 2;
}

// UInt64Rules describes the constraints applied to `uint64` values
message UInt64Rules {
    // Lt specifies that this field must be less than the specified value,
    // exclusive
    optional uint64 lt = 2;

    // Lte specifies that this field must be less than or equal to the
    // specified value, inclusive
    optional uint64 lte = 3;

    // Gt specifies that this field must be greater than the specified value,
    // exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    // range is reversed.
    optional uint64 gt = 4;

    // Gte specifies that this field must be greater than or equal to the
    // specified value, inclusive. If the value of Gte is larger than a
    // specified Lt or Lte, the range is reversed.
    optional uint64 gte = 5;
}

// StringRules describe the constraints applied to `string` values
message StringRules {
    // Const specifies that this field must be exactly the specified value
    optional string const = 1;

    // MinLen specifies that this field must be the specified number of
    // characters (Unicode code points) at a minimum. Note that the number of
    // characters may differ from the number of bytes in the string.
    optional uint64 min_len = 2;

    // MaxLen specifies that this field must be the specified number of
    // characters (Unicode code points) at a maximum. Note that the number of
    // characters may differ from the number of bytes in the string.
    optional uint64 max_len = 3;



    // WellKnown rules provide advanced constraints against common string
    // patterns
    oneof well_known {


        // Uuid specifies that the field must be a valid UUID as defined by
        // RFC 4122
        bool uuid     = 22;
    }
}

// RepeatedRules describe the constraints applied to `repeated` values
message RepeatedRules {
    // MinItems specifies that this field must have the specified number of
    // items at a minimum
    optional uint64 min_items = 1;

    // MaxItems specifies that this field must have the specified number of
    // items at a maximum
    optional uint64 max_items = 2;

    // Unique specifies that all elements in this field must be unique. This
    // constraint is only applicable to scalar and enum types (messages are not
    // supported).
    optional bool   unique    = 3;

    // Items specifies the constraints to be applied to each item in the field.
    // Repeated message fields will still execute validation against each item
    // unless skip is specified here.
    optional FieldRules items = 4;
}
